// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2eproto;
class City;
class CityDefaultTypeInternal;
extern CityDefaultTypeInternal _City_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::City* Arena::CreateMaybeMessage<::City>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class City PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:City) */ {
 public:
  inline City() : City(nullptr) {};
  virtual ~City();

  City(const City& from);
  City(City&& from) noexcept
    : City() {
    *this = ::std::move(from);
  }

  inline City& operator=(const City& from) {
    CopyFrom(from);
    return *this;
  }
  inline City& operator=(City&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const City& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const City* internal_default_instance() {
    return reinterpret_cast<const City*>(
               &_City_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(City& a, City& b) {
    a.Swap(&b);
  }
  inline void Swap(City* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(City* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline City* New() const final {
    return CreateMaybeMessage<City>(nullptr);
  }

  City* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<City>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const City& from);
  void MergeFrom(const City& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(City* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "City";
  }
  protected:
  explicit City(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_city_2eproto);
    return ::descriptor_table_city_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kZipCodeFieldNumber = 2,
    kCountryNameFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string zip_code = 2;
  void clear_zip_code();
  const std::string& zip_code() const;
  void set_zip_code(const std::string& value);
  void set_zip_code(std::string&& value);
  void set_zip_code(const char* value);
  void set_zip_code(const char* value, size_t size);
  std::string* mutable_zip_code();
  std::string* release_zip_code();
  void set_allocated_zip_code(std::string* zip_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_zip_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_zip_code(
      std::string* zip_code);
  private:
  const std::string& _internal_zip_code() const;
  void _internal_set_zip_code(const std::string& value);
  std::string* _internal_mutable_zip_code();
  public:

  // string country_name = 3;
  void clear_country_name();
  const std::string& country_name() const;
  void set_country_name(const std::string& value);
  void set_country_name(std::string&& value);
  void set_country_name(const char* value);
  void set_country_name(const char* value, size_t size);
  std::string* mutable_country_name();
  std::string* release_country_name();
  void set_allocated_country_name(std::string* country_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_country_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_country_name(
      std::string* country_name);
  private:
  const std::string& _internal_country_name() const;
  void _internal_set_country_name(const std::string& value);
  std::string* _internal_mutable_country_name();
  public:

  // @@protoc_insertion_point(class_scope:City)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zip_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_city_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// City

// string name = 1;
inline void City::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& City::name() const {
  // @@protoc_insertion_point(field_get:City.name)
  return _internal_name();
}
inline void City::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:City.name)
}
inline std::string* City::mutable_name() {
  // @@protoc_insertion_point(field_mutable:City.name)
  return _internal_mutable_name();
}
inline const std::string& City::_internal_name() const {
  return name_.Get();
}
inline void City::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void City::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:City.name)
}
inline void City::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:City.name)
}
inline void City::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:City.name)
}
inline std::string* City::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* City::release_name() {
  // @@protoc_insertion_point(field_release:City.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void City::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:City.name)
}
inline std::string* City::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:City.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void City::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:City.name)
}

// string zip_code = 2;
inline void City::clear_zip_code() {
  zip_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& City::zip_code() const {
  // @@protoc_insertion_point(field_get:City.zip_code)
  return _internal_zip_code();
}
inline void City::set_zip_code(const std::string& value) {
  _internal_set_zip_code(value);
  // @@protoc_insertion_point(field_set:City.zip_code)
}
inline std::string* City::mutable_zip_code() {
  // @@protoc_insertion_point(field_mutable:City.zip_code)
  return _internal_mutable_zip_code();
}
inline const std::string& City::_internal_zip_code() const {
  return zip_code_.Get();
}
inline void City::_internal_set_zip_code(const std::string& value) {
  
  zip_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void City::set_zip_code(std::string&& value) {
  
  zip_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:City.zip_code)
}
inline void City::set_zip_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zip_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:City.zip_code)
}
inline void City::set_zip_code(const char* value,
    size_t size) {
  
  zip_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:City.zip_code)
}
inline std::string* City::_internal_mutable_zip_code() {
  
  return zip_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* City::release_zip_code() {
  // @@protoc_insertion_point(field_release:City.zip_code)
  return zip_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void City::set_allocated_zip_code(std::string* zip_code) {
  if (zip_code != nullptr) {
    
  } else {
    
  }
  zip_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zip_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:City.zip_code)
}
inline std::string* City::unsafe_arena_release_zip_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:City.zip_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return zip_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void City::unsafe_arena_set_allocated_zip_code(
    std::string* zip_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (zip_code != nullptr) {
    
  } else {
    
  }
  zip_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      zip_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:City.zip_code)
}

// string country_name = 3;
inline void City::clear_country_name() {
  country_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& City::country_name() const {
  // @@protoc_insertion_point(field_get:City.country_name)
  return _internal_country_name();
}
inline void City::set_country_name(const std::string& value) {
  _internal_set_country_name(value);
  // @@protoc_insertion_point(field_set:City.country_name)
}
inline std::string* City::mutable_country_name() {
  // @@protoc_insertion_point(field_mutable:City.country_name)
  return _internal_mutable_country_name();
}
inline const std::string& City::_internal_country_name() const {
  return country_name_.Get();
}
inline void City::_internal_set_country_name(const std::string& value) {
  
  country_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void City::set_country_name(std::string&& value) {
  
  country_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:City.country_name)
}
inline void City::set_country_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:City.country_name)
}
inline void City::set_country_name(const char* value,
    size_t size) {
  
  country_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:City.country_name)
}
inline std::string* City::_internal_mutable_country_name() {
  
  return country_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* City::release_country_name() {
  // @@protoc_insertion_point(field_release:City.country_name)
  return country_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void City::set_allocated_country_name(std::string* country_name) {
  if (country_name != nullptr) {
    
  } else {
    
  }
  country_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:City.country_name)
}
inline std::string* City::unsafe_arena_release_country_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:City.country_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return country_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void City::unsafe_arena_set_allocated_country_name(
    std::string* country_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (country_name != nullptr) {
    
  } else {
    
  }
  country_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      country_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:City.country_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2eproto
